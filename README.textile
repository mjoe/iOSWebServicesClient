h1. iOS Web Services Consumption Comparison

h2. Introduction

This project showcases different transport formats and libraries to consume web services from an iOS application. It features a server application, a command-line script that saves the output of the server application in different formats, and an iOS client application (compatible with iOS 3.0 and higher).

The server application (written in PHP) reads a MySQL database (Server/data/schema.sql) and outputs data in the following formats:

* HTML
* JSON
* YAML
* XML (arbitrary format)
* SOAP
* Property list
** Binary property list
** XML property list
* CSV
* Protocol Buffer (Google)

For each output format, there is a single "Formatter" subclass in the Server/formatters folder. A static method in the FormatterFactory class returns the formatter that corresponds to the requested output format.

h2. Future Extensions

In future versions of this project, the following formats and libraries could be integrated:

* "MessagePack":http://msgpack.org/
* "Apache Thrift":http://incubator.apache.org/thrift/ ("StackOverflow article":http://stackoverflow.com/questions/3620888/thrift-framework-for-iphone about how to integrate with the iPhone)
* "BERT":http://bert-rpc.org/
* "Apache Avro":http://avro.apache.org/
* "Open Network Computing Remote Procedure Call (ONC RPC) aka Sun RPC":http://en.wikipedia.org/wiki/Open_Network_Computing_Remote_Procedure_Call

h2. Libraries Used

The project uses several different libraries:

For the server:

* "cfpropertylist":http://code.google.com/p/cfpropertylist/ - A PHP Implementation Of Apple's plist (PropertyList).
* "NuSOAP":http://sourceforge.net/projects/nusoap/ - SOAP Toolkit for PHP.
* "spyc":http://code.google.com/p/spyc/ - A simple YAML loader/dumper class for PHP.
* "pb4php":http://code.google.com/p/pb4php/ - Protocol Buffer for PHP

For the iOS client:

* "ASIHTTPRequest":http://allseeing-i.com/ASIHTTPRequest - wrapper around the CFNetwork API.
* "json-framework":http://code.google.com/p/json-framework/ - A strict JSON parser/generator for Objective-C.
* "JSONKit":https://github.com/johnezang/JSONKit - A Very High Performance Objective-C JSON Library.
* "YAJL-objc":https://github.com/gabriel/yajl-objc - Objective-C bindings for the "YAJL parser":http://lloyd.github.com/yajl/.
* "BSJSON":https://github.com/blakeseely/bsjsonadditions/ - A simple JSON parser in Objective-C.
* "touchcode":http://code.google.com/p/touchcode/ - Repository of iPhone and iPod Touch source code.
* "cCSVParse":http://michael.stapelberg.de/cCSVParse - A CSV parsing library in Objective-C.
* "TBXML V1.3":http://www.tbxml.co.uk/ - XML Parser by Tom Bradley.
* "KissXML":http://code.google.com/p/kissxml/ - KissXML is a replacement for Cocoa's NSXML cluster of classes. It is based on libxml.
* "TinyXML":http://www.grinninglizard.com/tinyxml/ - TinyXML is a simple, small, C++ XML parser that can be easily integrating into other programs.
* "gdata-objectivec-client":http://code.google.com/p/gdata-objectivec-client/source/browse/trunk/Source/XMLSupport/ - XML support classes included in the Google Data APIs Objective-C Client Library.
* "APXML":http://arashpayan.com/blog/index.php/2009/01/14/apxml-nsxmldocument-substitute-for-iphoneipod-touch/ - NSXMLDocument ’substitute’ for iPhone/iPod Touch.
* "ProtocolBuffers":http://code.google.com/p/metasyntactic/wiki/ProtocolBuffers - Objective-C Protocol Buffers for OSX and the iPhone.
* "AQXMLParser":http://github.com/AlanQuatermain/aqtoolkit - Another parser for XML in Objective-C.
* "InAppSettingsKit":http://www.inappsettingskit.com/ - Library allowing to access the current setting bundle from the application.

h3. YAML in Cocoa

For parsing YAML in Cocoa, the code in "this page":http://will.thimbleby.net/yaml.html was adapted, removing dependencies on the Cocoa AppKit framework (not available on the iPhone). 

If you want to compile the YAML::Syck library with Fink, follow these steps:

# Install Fink on Mac OS X 10.6 from source "following these instructions":http://www.finkproject.org/download/srcdist.php (there is no binary installer available for Snow Leopard at the time of this writing).
# Type "/sw/bin/fink install syck" to install syck.
# The Xcode project should now compile without problems.

To avoid these steps above, this project includes a version of libsyck.a already compiled as a "fat binary" format for both ARM (iPhone OS) and Intel (Simulator) processors.

h3. SOAP in Cocoa

The "wsdl2objc":http://code.google.com/p/wsdl2objc/ tool was used to generate Objective-C (Cocoa) code from the server's WSDL. This code was later adapted to parse the array returned by the server. There is also an online WSDL to Objective-C generator out there, see http://www.sudzc.com/.

h2. Installation

Take a look at the AMP-Stack for your OS (http://en.wikipedia.org/wiki/List_of_AMP_packages), maybe it helps.

# Set up the server:
## Upload the "Server" folder contents via FTP or other means.
## Create a MySQL database.
## Import the "Server/data/schema.sql" file into the database. This will create a "data" table in the database.
## Change the settings in the "Server/data/database.php" file to access the database (server, username, password).
# Set up the client:
## Open the "Client/Client.xcodeproj" project in Xcode.
## Compile the project.
## Execute the client, which will connect to your server and retrieve data.
## If required, change the URL of the remote data tapping the "Settings" button in the interface.

h2. Other Links

* The sample data generated in this example comes from "http://www.generatedata.com/":http://www.generatedata.com/.
* "cfpropertylist in Ruby":http://rubyforge.org/projects/cfpropertylist/ - Read, manipulate and write both binary and XML property lists as defined by Apple.
* "PyYAML":http://pyyaml.org/ - PyYAML.org - the home of various YAML implementations for Python.
* "plistlib":http://docs.python.org/dev/library/plistlib.html - Generate and parse Mac OS X .plist files from Python.
* "Discussion about CSV parsing in Objective-C":http://www.cocoadev.com/index.pl?ReadWriteCSVAndTSV
* "soapUI":http://www.soapui.org/ - Cross-platform tool for testing SOAP web services.
* "How To Choose The Best XML Parser for Your iPhone Project":http://www.raywenderlich.com/553/how-to-chose-the-best-xml-parser-for-your-iphone-project - by Ray Wenderlich, iPhone Developer and Gamer.
* "iPhone Programming Tips: building Unix software":http://latenitesoft.blogspot.com/2008/10/iphone-programming-tips-building-unix.html - The bundled libsyck.a static library (fat binary for both ARM and Intel) was created using the information in this page.
* "XML Benchmarks - libxml2 sax":http://dotnot.org/blog/archives/2008/02/23/xml-benchmarks-libxml2-sax/
* "Using the SAX Interface of LibXML":http://www.jamesh.id.au/articles/libxml-sax/libxml-sax.html
* "libxml2 Push Parsing":http://bill.dudney.net/roller/objc/entry/libxml2_push_parsing
* "web services with cocoa surprise":http://samsoff.es/posts/web-services-with-cocoa-surprise
* "iphone plist tutorial":http://samsoff.es/posts/iphone-plist-tutorial
* "Comparison of data serialization formats":http://en.wikipedia.org/wiki/Comparison_of_data_serialization_formats
* "Property list":http://en.wikipedia.org/wiki/Property_list - Wikipedia page.
* "Protocol Buffers":http://en.wikipedia.org/wiki/Protocol_Buffers - Wikipedia page.
* "Protocol Buffers Developer Guide":http://code.google.com/apis/protocolbuffers/docs/overview.html
* "XMLRPC framework":http://iphone.trac.wordpress.org/browser/trunk/Classes/XMLRPC used by the WordPress iPhone application.
* "AQXMLParser == Big Memory Win":http://quatermain.tumblr.com/post/93651539/aqxmlparser-big-memory-win - Article about the AQXMLParser library.
* "Results of Northwind database rows serialization benchmarks run at 06/02/2010":http://www.servicestack.net/benchmarks/NorthwindDatabaseRowsSerialization.1000000-times.2010-02-06.html - Interesting analysis of serialization performance using .NET libraries.

The application icon and splash screen have been adapted from "this picture":http://www.eee.bham.ac.uk/com_test/img\dsnl\internet15jan06.png.

h2. License

This project is released with a liberal BSD license. See the LICENSE file for details.

